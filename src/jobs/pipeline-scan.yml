---
description: >
 Scan the application for SAST Pipeline with Veracode.
  This command calls the others, and should be used as the command for scanning.
parameters:
  tag:
    type: string
    default: "latest"
    description: "Select a Veracode version"
  vid:
    type: env_var_name
    default: VERACODE_API_ID
    description: >
      Name of env var containing your Veracode API ID.
      Pass this as a raw string.
      If omitted it's assumed the CLI has already been setup
      with a valid token beforehand.
  vkey:
    type: env_var_name
    default: VERACODE_API_KEY
    description: >
      Name of env var containing your Veracode API KEY.
      Pass this as a raw string.
      If omitted it's assumed the CLI has already been setup
      with a valid token beforehand.
  working-directory:
    description: The directory out of which circleci will run commands
    type: string
    default: .
  appname:
    type: string
    default: "${CIRCLE_PROJECT_REPONAME}"
    description: Name of the Veracode application profile.
  policy-name:
    description: Name of the custom policy to be applied to the scan
    type: string
    default: "PCI 3.2.1 v1"
  fail-on-severity:
    description: >-
      Scan will fail on issues of the set severity. Must be a comma separated
      string of any of the following values= ["Very High", "High", "Medium",
      "Low", "Very Low"].
    type: string
    default: '"Very High, High"'
  target-directory:
    description: The target directory to scan with veracode.
    type: string
  timeout:
    description: >
      The amount of time(in minutes) before reporting
      an unsuccessful scan.
    type: integer
    default: 60
  verbose:
    description: Display verbose output to console
    type: boolean
    default: true
working_directory: ~/repo/<< parameters.working-directory >>
executor:
  name: pipeline
  tag: << parameters.tag >>
steps:
  - checkout:
      path: ~/repo
  - pipeline-scan:
      vid: << parameters.vid >>
      vkey: << parameters.vkey >>
      appname: <<parameters.appname>>
      working-directory: << parameters.working-directory >>
      target-directory: << parameters.target-directory >>
      policy-name: << parameters.policy-name >>
      timeout: << parameters.timeout >>
      verbose: << parameters.verbose >>
